<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库优化第一步看懂explain</title>
      <link href="/2024/05/20/arary/Explain/"/>
      <url>/2024/05/20/arary/Explain/</url>
      
        <content type="html"><![CDATA[<h2 id="explain常用字段"><a href="#explain常用字段" class="headerlink" title="explain常用字段"></a>explain常用字段</h2><blockquote><ul><li>type ：访问的类型</li><li>key ：实际使用到的索引，如果为NULL，则没有使用索引</li><li>ref ：显示索引的哪一列被使用了，如果可能的话，是一个常数，哪些列或常量被用于查找索引列上的值</li><li>rows ：根据表统计信息及索引选用情况，大致估算出找到所需的记录所需读取的行数</li><li>Extra ：包含不适合在其它列中显示但十分重要的额外信息</li></ul></blockquote><h2 id="表数据"><a href="#表数据" class="headerlink" title="表数据"></a>表数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> armscii8 <span class="keyword">COLLATE</span> armscii8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> armscii8 <span class="keyword">COLLATE</span> armscii8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pass` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> armscii8 <span class="keyword">COLLATE</span> armscii8_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> armscii8 <span class="keyword">COLLATE</span> armscii8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> armscii8 <span class="keyword">COLLATE</span> <span class="operator">=</span> armscii8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `test`.`<span class="keyword">user</span>` (`id`, `name`, `account`, `pass`, `email`) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;User1&#x27;</span>, <span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;pass1&#x27;</span>, <span class="string">&#x27;user1@example.com&#x27;</span>);</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><h2 id="常用分析"><a href="#常用分析" class="headerlink" title="常用分析"></a>常用分析</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">14</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> const <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> const <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+-------+------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>key: PRIMARY 走的主键索引</p><p>ref： const 判断条件为常数匹配</p><p>rows： 1  扫描数据条数</p></blockquote><p>范围匹配</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">10</span> <span class="keyword">and</span> id <span class="operator">&lt;=</span> <span class="number">50</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">41</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>key: PRIMARY 主键索引</p><p>type： range 区间扫描</p><p>rows: 41 扫描行数</p><p>Extra： Using where 使用了where条件</p></blockquote><p>唯一约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将account字段设置为唯一约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="keyword">UNIQUE</span>(account);</span><br><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> account <span class="keyword">like</span> <span class="string">&#x27;user%&#x27;</span>；</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                 <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> account       <span class="operator">|</span> account <span class="operator">|</span> <span class="number">257</span>     <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>   <span class="number">51</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="keyword">condition</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>key: account account字段索引</p><p>row: 51扫描行数</p><p>Extra： Using index condition 使用索引判断</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> account <span class="keyword">like</span> <span class="string">&#x27;%user&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1051</span> <span class="operator">|</span>    <span class="number">11.11</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>type: ALL 全表扫描 常见的索引失效</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">5</span> <span class="keyword">and</span> id <span class="operator">&lt;=</span> <span class="number">10</span> <span class="keyword">order</span> <span class="keyword">by</span> account;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> filesort <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+-----------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>Extra: Using where; Using filesort 使用条件判断，将判断出的数据进行文件排序（通常是以为没走索引所以才需要排序）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> pass;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1051</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> temporary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-----------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+-----------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys   <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+-----------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index <span class="operator">|</span> <span class="keyword">PRIMARY</span>,account <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1051</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+-----------------+---------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><blockquote><p>Extra : Using temporary 表示Mysql创建了临时表来查询存储结果，通用在排序或分组发生</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="keyword">in</span>( <span class="number">100</span>,<span class="number">123</span>,<span class="number">112</span>,<span class="number">121</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span>; <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+------+----------+--------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">in</span>( user1,user3,user20,user40);</span><br><span class="line">ERROR <span class="number">1054</span> (<span class="number">42</span>S22): <span class="literal">Unknown</span> <span class="keyword">column</span> <span class="string">&#x27;user1&#x27;</span> <span class="keyword">in</span> <span class="string">&#x27;where clause&#x27;</span></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> name <span class="keyword">in</span>( <span class="string">&#x27;user1&#x27;</span>,<span class="string">&#x27;user3&#x27;</span>,<span class="string">&#x27;user20&#x27;</span>,<span class="string">&#x27;user40&#x27;</span>);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">1051</span> <span class="operator">|</span>    <span class="number">40.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目实战之批量插入性能分析</title>
      <link href="/2024/05/16/backend/batchInsert/"/>
      <url>/2024/05/16/backend/batchInsert/</url>
      
        <content type="html"><![CDATA[<div class="note warning simple"><p>不是专业测试，时间的参考价值不大，但是常见的批量插入方法应该能帮到你。</p></div><h2 id="模拟表"><a href="#模拟表" class="headerlink" title="模拟表"></a>模拟表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> emp;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    userName <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    pass <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> insert_emp_data()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> batch_size <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> total <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">DECLARE</span> j <span class="type">INT</span>;</span><br><span class="line"></span><br><span class="line">    WHILE i <span class="operator">&lt;=</span> total DO</span><br><span class="line">        <span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">SET</span> j <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        WHILE j <span class="operator">&lt;</span> batch_size <span class="keyword">AND</span> i <span class="operator">&lt;=</span> total DO</span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (userName, pass, email)</span><br><span class="line">            <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;user&#x27;</span>, i), CONCAT(<span class="string">&#x27;pass&#x27;</span>, i), CONCAT(<span class="string">&#x27;user&#x27;</span>, i, <span class="string">&#x27;@example.com&#x27;</span>));</span><br><span class="line">            <span class="keyword">SET</span> i <span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">SET</span> j <span class="operator">=</span> j <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">END</span> WHILE;</span><br><span class="line">        <span class="keyword">COMMIT</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="keyword">CALL</span> insert_emp_data();</span><br></pre></td></tr></table></figure><p>使用Mysql自带的存储过程进行10万条数据插入： </p><blockquote><p>耗时： 9.125 s</p></blockquote><h2 id="Mybatis-Foreach"><a href="#Mybatis-Foreach" class="headerlink" title="Mybatis-Foreach"></a>Mybatis-Foreach</h2><p>组装数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Emp&gt;  list;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TestMapper testMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">100000</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">            emp.setUserName(<span class="string">&quot;user&quot;</span>+i);</span><br><span class="line">            emp.setPass(<span class="string">&quot;123&quot;</span>+i);</span><br><span class="line">            emp.setEmail(<span class="string">&quot;example&quot;</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/foreach&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InsertForeach</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Emp&gt; list1 = TestController.list;</span><br><span class="line">        testMapper.testBatchInsert(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>失败，直接语法错误，看来values应该是有长度限制</p></blockquote><h2 id="分页处理"><a href="#分页处理" class="headerlink" title="分页处理"></a>分页处理</h2><p>将代码改装成分页处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/foreach&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InsertForeach</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    List&lt;Emp&gt; list1 = TestController.list;</span><br><span class="line">    <span class="type">long</span> <span class="variable">s</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    List&lt;List&lt;Emp&gt;&gt; partition = Lists.partition(list1, <span class="number">400</span>);</span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">startRow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        testMapper.testBatchInsert(partition.get(startRow.get()));</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">offset</span> <span class="operator">=</span> startRow.incrementAndGet();</span><br><span class="line">        <span class="comment">// 最后一页</span></span><br><span class="line">        <span class="keyword">if</span> (offset == partition.size()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(System.currentTimeMillis() - s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>耗时： 7.416</p></blockquote><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/foreach&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InsertForeach</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        List&lt;Emp&gt; list1 = TestController.list;</span><br><span class="line">        <span class="type">long</span> <span class="variable">s</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;List&lt;Emp&gt;&gt; partition = Lists.partition(list1, <span class="number">400</span>);</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">20</span>, <span class="number">50</span>,</span><br><span class="line">                <span class="number">4</span>, TimeUnit.SECONDS, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">200</span>), <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(partition.size());</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Emp&gt; item : partition) &#123;</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    testMapper.testBatchInsert(item);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>耗时： 0.151 可能是测试方法不对</p></blockquote><h2 id="JdbcTemp"><a href="#JdbcTemp" class="headerlink" title="JdbcTemp"></a>JdbcTemp</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/foreach&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InsertForeach</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    List&lt;Emp&gt; list1 = TestController.list;</span><br><span class="line">    <span class="type">long</span> <span class="variable">s</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO emp (userName, pass, email) VALUES (?, ?, ?)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.batchUpdate(sql, <span class="keyword">new</span> <span class="title class_">BatchPreparedStatementSetter</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValues</span><span class="params">(PreparedStatement ps, <span class="type">int</span> i)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> list1.get(i);</span><br><span class="line">            ps.setString(<span class="number">1</span>, emp.getUserName());</span><br><span class="line">            ps.setString(<span class="number">2</span>, emp.getPass());</span><br><span class="line">            ps.setString(<span class="number">3</span>, emp.getEmail());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBatchSize</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> list1.size();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(System.currentTimeMillis() - s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>耗时： 60.058 s </p></blockquote><h2 id="sqlsession"><a href="#sqlsession" class="headerlink" title="sqlsession"></a>sqlsession</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/foreach&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InsertForeach</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    List&lt;Emp&gt; list1 = TestController.list;</span><br><span class="line">    List&lt;List&lt;Emp&gt;&gt; partition = Lists.partition(list1, <span class="number">400</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">s</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession(ExecutorType.BATCH);</span><br><span class="line">    <span class="type">TestMapper</span> <span class="variable">sqlSessionMapper</span> <span class="operator">=</span> sqlSession.getMapper(TestMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (List&lt;Emp&gt; item : partition) &#123;</span><br><span class="line">        sqlSessionMapper.testBatchInsert(item);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(System.currentTimeMillis() - s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>耗时： 6.544 s</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis实战之Redisson使用技巧详解</title>
      <link href="/2024/05/16/backend/redisson/"/>
      <url>/2024/05/16/backend/redisson/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>什么是 Redisson？来自于官网上的描述内容如下！</p><blockquote><p>Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格客户端（In-Memory Data Grid）。它不仅提供了一系列的 redis<br>常用数据结构命令服务，还提供了许多分布式服务，例如分布式锁、分布式对象、分布式集合、分布式远程服务、分布式调度任务服务等等。</p></blockquote><p>相比于 Jedis、Lettuce 等基于 redis 命令封装的客户端，Redisson 提供的功能更加高端和抽象，逼格高！</p><p>更多功能特性和开发文档说明，可用移步github进行获取，访问地址如下：</p><p><a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">redisson地址</a></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a><strong>基本使用</strong></h2><p>跟过去一样，首先创建一个 maven 项目，添加<code>Redisson</code>依赖包。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单机环境下，简单样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer()</span><br><span class="line">                .setConnectionMinimumIdleSize(<span class="number">5</span>) <span class="comment">// 设置最下空闲数</span></span><br><span class="line">                .setConnectionPoolSize(<span class="number">10</span>) <span class="comment">// 设置连接池大小</span></span><br><span class="line">                .setIdleConnectionTimeout(<span class="number">3</span>*<span class="number">1000</span>) <span class="comment">// 设置空闲连接超时时间 单位为毫秒</span></span><br><span class="line">                .setConnectTimeout(<span class="number">10</span>*<span class="number">1000</span>) <span class="comment">// 设置连接超时时间 单位为毫秒</span></span><br><span class="line">                .setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">                .setDatabase(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//获取客户端</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        RBucket&lt;String&gt; selfBucket = redissonClient.getBucket(<span class="string">&quot;selfBucket&quot;</span>);</span><br><span class="line">        selfBucket.set(<span class="string">&quot;hello&quot;</span>,<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        selfBucket.set(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        <span class="comment">//获取所有的key</span></span><br><span class="line">        redissonClient.getKeys().getKeys().forEach(key -&gt; System.out.println(key));</span><br><span class="line">        <span class="comment">//关闭客户端</span></span><br><span class="line">        redissonClient.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ps：创建 RedissonClient 对象实例的方式多钟多样，可以直接通过在代码中设置 Redis 服务的相关参数创建，也可以通过加载 JSON 格式、 YAML 格式或者 Spring XML 配置文件来创建，详细的参数配置可用移步上文提到的 Redisson 开发文档。</p></blockquote><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Redisson 支持通过<code>RBucket</code>对象来操作字符串数据结构，通过<code>RBucket</code>实例可以设置<code>value</code>或设置<code>value</code>和有效期，简单样例如下！</p><ol><li>简单字符串操作</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串操作</span></span><br><span class="line">RBucket&lt;String&gt; rBucket = redissonClient.getBucket(<span class="string">&quot;strKey&quot;</span>);</span><br><span class="line"><span class="comment">// 设置value和key的有效期</span></span><br><span class="line">rBucket.set(<span class="string">&quot;张三&quot;</span>, <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//rBucket.getAndDelete();  获取strKey的值并删除strKey这个key</span></span><br><span class="line"><span class="comment">//rBucket.compareAndSet(&quot;张三&quot;,&quot;李四&quot;); 和cas想同先比较后设置</span></span><br><span class="line"><span class="comment">//rBucket.setIfExists(&quot;hello1&quot;); 存在值就设置</span></span><br><span class="line"><span class="comment">// 通过key获取value</span></span><br><span class="line"><span class="comment">//rBucket.isExists(); 判断当前桶是否有值</span></span><br><span class="line"><span class="comment">// rBucket.delete(); 删除桶中数据</span></span><br><span class="line">System.out.println(redissonClient.getBucket(<span class="string">&quot;strKey&quot;</span>).get());</span><br></pre></td></tr></table></figure><ol start="2"><li>对象操作</li></ol><p>Redisson 支持将对象作为<code>value</code>存入<code>redis</code>，被存储的对象事先必须要实现序列化接口<code>Serializable</code>，否则会报错，简单样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串对象操作</span></span><br><span class="line">RBucket&lt;user&gt; rBucket = redissonClient.getBucket(<span class="string">&quot;strKey2&quot;</span>);</span><br><span class="line">rBucket.set(<span class="keyword">new</span> <span class="title class_">user</span>().setId(<span class="number">1001</span>).setName(<span class="string">&quot;stone&quot;</span>));</span><br><span class="line">System.out.println(redissonClient.getBucket(<span class="string">&quot;strKey2&quot;</span>).get());</span><br></pre></td></tr></table></figure><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>Redisson 支持通过<code>RMap</code>对象来操作哈希数据结构，简单样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RMap&lt;String, String&gt; rMap = redissonClient.getMap(<span class="string">&quot;mapkey&quot;</span>);</span><br><span class="line">rMap.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">rMap.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;赵四&quot;</span>);</span><br><span class="line">rMap.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;50&quot;</span>);</span><br><span class="line"><span class="comment">//rMap.putIfAbsent() 如果不存在设置</span></span><br><span class="line"><span class="comment">//rMap.size() 大小</span></span><br><span class="line"><span class="comment">// rMap.clear();清空集合</span></span><br><span class="line">rMap.expire(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">System.out.println(redissonClient.getMap(<span class="string">&quot;mapkey&quot;</span>).get(<span class="string">&quot;name&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">RList&lt;user&gt; rList = redissonClient.getList(<span class="string">&quot;listkey&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">user</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line">student1.setId(<span class="number">1</span>);</span><br><span class="line">student1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">rList.add(student1);</span><br><span class="line"></span><br><span class="line"><span class="type">user</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line">student2.setId(<span class="number">2</span>);</span><br><span class="line">student2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">rList.add(student2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置过期时间</span></span><br><span class="line">rList.expire(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// rList.subList(0,rList.size()).clear(); 获取子列表</span></span><br><span class="line"><span class="comment">// rList.contains(student1);  判断是否存在student1</span></span><br><span class="line"><span class="comment">// rList.indexOf(student2)   返回student2第一次出现的位置</span></span><br><span class="line"><span class="comment">//  rList.lastIndexOf(student2)   返回student2最后一次出现的位置</span></span><br><span class="line"><span class="comment">//rList.retainAll(Arrays.asList(student2)); 仅保留列表中存在的集合</span></span><br><span class="line"><span class="comment">// rList.toArray() 转化成集合</span></span><br><span class="line"><span class="comment">// 通过key获取value</span></span><br><span class="line">System.out.println(redissonClient.getList(<span class="string">&quot;listkey&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RSet&lt;user&gt; rSet = redissonClient.getSet(<span class="string">&quot;setkey&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">user</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line">student1.setId(<span class="number">1L</span>);</span><br><span class="line">student1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">rSet.add(student1);</span><br><span class="line"></span><br><span class="line"><span class="type">user</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line">student2.setId(<span class="number">2L</span>);</span><br><span class="line">student2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">rSet.add(student2);</span><br><span class="line"></span><br><span class="line">rSet.expire(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// rSet.contains(student1);判断集合中是否包含指定的元素。</span></span><br><span class="line"><span class="comment">// rSet.iterator();返回集合的迭代器</span></span><br><span class="line"><span class="comment">// rSet.retainAll(Arrays.asList(student1, student2));仅保留集合中包含在指定集合中的元素，移除其他元素。</span></span><br><span class="line">System.out.println(redissonClient.getSet(<span class="string">&quot;setkey&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h2><p>Redisson 支持通过<code>RSortedSet</code>对象来操作有序集合数据结构，在使用对象来存储之前，实体对象必须先实现<code>Comparable</code>接口，并重写比较逻辑，否则会报错，简单样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RSortedSet&lt;user&gt; sortSetkey = redissonClient.get(<span class="string">&quot;sortSetkey&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">user</span> <span class="variable">student1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line">student1.setId(<span class="number">1</span>);</span><br><span class="line">student1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">sortSetkey.add(student1);</span><br><span class="line"></span><br><span class="line"><span class="type">user</span> <span class="variable">student2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">user</span>();</span><br><span class="line">student2.setId(<span class="number">2</span>);</span><br><span class="line">student2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">sortSetkey.add(student2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sortSetkey.iterator() 返回集合的迭代器</span></span><br><span class="line">System.out.println(redissonClient.getSortedSet(<span class="string">&quot;sortSetkey&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="添加监听"><a href="#添加监听" class="headerlink" title="添加监听"></a>添加监听</h2><p>以String为例来对redis的一些操作进行监听</p><h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><p>布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。</p><p>布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难。</p><p>Redisson 支持通过<code>RBloomFilter</code>对象来操作布隆过滤器，简单样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RBloomFilter</span> <span class="variable">rBloomFilter</span> <span class="operator">=</span> redissonClient.getBloomFilter(<span class="string">&quot;seqId&quot;</span>);</span><br><span class="line"><span class="comment">// 初始化预期插入的数据量为10000和期望误差率为0.01</span></span><br><span class="line">rBloomFilter.tryInit(<span class="number">10000</span>, <span class="number">0.01</span>);</span><br><span class="line"><span class="comment">// 插入部分数据</span></span><br><span class="line">rBloomFilter.add(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">rBloomFilter.add(<span class="string">&quot;200&quot;</span>);</span><br><span class="line">rBloomFilter.add(<span class="string">&quot;300&quot;</span>);</span><br><span class="line"><span class="comment">//设置过期时间</span></span><br><span class="line">rBloomFilter.expire(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 判断是否存在</span></span><br><span class="line">System.out.println(rBloomFilter.contains(<span class="string">&quot;300&quot;</span>));</span><br><span class="line">System.out.println(rBloomFilter.contains(<span class="string">&quot;200&quot;</span>));</span><br><span class="line">System.out.println(rBloomFilter.contains(<span class="string">&quot;999&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="分布式自增id"><a href="#分布式自增id" class="headerlink" title="分布式自增id"></a>分布式自增id</h2><p>ID 是数据的唯一标识，传统的做法是利用 UUID 和<a href="https://cloud.tencent.com/solution/database?from_column=20065&from=20065">数据库</a>的自增 ID。</p><p>但由于 UUID 是无序的，不能附带一些其他信息，因此实际作用有限。</p><p>随着业务的发展，数据量会越来越大，需要对数据进行分表，甚至分库。分表后每个表的数据会按自己的节奏来自增，这样会造成 ID 冲突，因此这时就需要一个单独的机制来负责生成唯一 ID，redis 原生支持生成全局唯一的 ID。</p><p>简单样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;aaaa&quot;</span>;</span><br><span class="line"><span class="comment">//通过redis的自增获取序号</span></span><br><span class="line"><span class="type">RAtomicLong</span> <span class="variable">atomicLong</span> <span class="operator">=</span> redissonClient.getAtomicLong(lockKey);</span><br><span class="line"><span class="comment">//设置过期时间</span></span><br><span class="line">atomicLong.expire(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">// 获取值</span></span><br><span class="line">System.out.println(atomicLong.incrementAndGet());</span><br></pre></td></tr></table></figure><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>Redisson 最大的亮点，也是使用最多的功能，就是提供了强大的<strong>分布式锁实现</strong>，特点是：使用简单、安全！</p><p>简单使用样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config.useSingleServer()</span><br><span class="line">        .setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">        .setPassword(<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">        .setDatabase(<span class="number">0</span>);</span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line"><span class="comment">//获取锁对象实例</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> redissonClient.getLock(lockKey);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//尝试5秒内获取锁，如果获取到了，最长60秒自动释放</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> rLock.tryLock(<span class="number">5L</span>, <span class="number">60L</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        <span class="comment">//成功获得锁，在这里处理业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取锁成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;获取锁失败，失败原因：&quot;</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//无论如何, 最后都要解锁</span></span><br><span class="line">    rLock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭客户端</span></span><br><span class="line">redissonClient.shutdown();</span><br></pre></td></tr></table></figure><p>以上是单机环境下的分布式锁实现逻辑，如果是集群环境下，应该如何处理呢？</p><p>Redisson 提供<code>RedissonRedLock</code>操作类，也被称为<strong>红锁</strong>，实现原理简单的总结有以下几点：</p><ul><li>1.如果有多个 redis 集群的时候，当且仅当从大多数（N&#x2F;2+1，比如有3个 redis 节点，那么至少有2个节点）的 Redis 节点都取到锁，并且获取锁使用的总耗时小于锁失效时间时，锁才算获取成功</li><li>2.如果获取失败，客户端会在所有的 Redis 实例上进行解锁操作</li><li>3.集群环境下，redis <a href="https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065&from=20065">服务器</a>直接不存在任何复制或者其他隐含的分布式协调机制，否则会存在实效的可能</li></ul><p><code>RedissonRedLock</code>简单使用样例如下！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Config</span> <span class="variable">config1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config1.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.3.111:6379&quot;</span>).setPassword(<span class="string">&quot;a123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redissonClient1</span> <span class="operator">=</span> Redisson.create(config1);</span><br><span class="line"></span><br><span class="line"><span class="type">Config</span> <span class="variable">config2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config2.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.3.112:6379&quot;</span>).setPassword(<span class="string">&quot;a123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redissonClient2</span> <span class="operator">=</span> Redisson.create(config2);</span><br><span class="line"></span><br><span class="line"><span class="type">Config</span> <span class="variable">config3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config3.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.3.113:6379&quot;</span>).setPassword(<span class="string">&quot;a123456&quot;</span>).setDatabase(<span class="number">0</span>);</span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redissonClient3</span> <span class="operator">=</span> Redisson.create(config3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取多个 RLock 对象</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock1</span> <span class="operator">=</span> redissonClient1.getLock(lockKey);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock2</span> <span class="operator">=</span> redissonClient2.getLock(lockKey);</span><br><span class="line"><span class="type">RLock</span> <span class="variable">lock3</span> <span class="operator">=</span> redissonClient3.getLock(lockKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据多个 RLock 对象构建 RedissonRedLock （最核心的差别就在这里）</span></span><br><span class="line"><span class="type">RedissonRedLock</span> <span class="variable">redLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedissonRedLock</span>(lock1, lock2, lock3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//尝试5秒内获取锁，如果获取到了，最长60秒自动释放</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> redLock.tryLock(<span class="number">5L</span>, <span class="number">60L</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span> (res) &#123;</span><br><span class="line">        <span class="comment">//成功获得锁，在这里处理业务</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取锁成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;获取锁失败，失败原因：&quot;</span> + e.getMessage());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//无论如何, 最后都要解锁</span></span><br><span class="line">    redLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集群模式"><a href="#集群模式" class="headerlink" title="集群模式"></a>集群模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config.useClusterServers()</span><br><span class="line">    .setScanInterval(<span class="number">2000</span>) <span class="comment">// 集群状态扫描间隔时间，单位是毫秒</span></span><br><span class="line">    <span class="comment">//可以用&quot;rediss://&quot;来启用SSL连接</span></span><br><span class="line">    .addNodeAddress(<span class="string">&quot;redis://127.0.0.1:7000&quot;</span>, <span class="string">&quot;redis://127.0.0.1:7001&quot;</span>)</span><br><span class="line">    .addNodeAddress(<span class="string">&quot;redis://127.0.0.1:7002&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br></pre></td></tr></table></figure><h2 id="主从模式"><a href="#主从模式" class="headerlink" title="主从模式"></a>主从模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config.useMasterSlaveServers()</span><br><span class="line">    <span class="comment">//可以用&quot;rediss://&quot;来启用SSL连接</span></span><br><span class="line">    .setMasterAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>)</span><br><span class="line">    .addSlaveAddress(<span class="string">&quot;redis://127.0.0.1:6389&quot;</span>, <span class="string">&quot;redis://127.0.0.1:6332&quot;</span>, <span class="string">&quot;redis://127.0.0.1:6419&quot;</span>)</span><br><span class="line">    .addSlaveAddress(<span class="string">&quot;redis://127.0.0.1:6399&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br></pre></td></tr></table></figure><h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">config.useSentinelServers()</span><br><span class="line">    .setMasterName(<span class="string">&quot;mymaster&quot;</span>)</span><br><span class="line">    <span class="comment">//可以用&quot;rediss://&quot;来启用SSL连接</span></span><br><span class="line">    .addSentinelAddress(<span class="string">&quot;127.0.0.1:26389&quot;</span>, <span class="string">&quot;127.0.0.1:26379&quot;</span>)</span><br><span class="line">    .addSentinelAddress(<span class="string">&quot;127.0.0.1:26319&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
